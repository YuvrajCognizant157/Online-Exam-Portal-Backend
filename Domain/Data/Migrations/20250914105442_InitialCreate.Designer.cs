// <auto-generated />
using System;
using Domain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Domain.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250914105442_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Exam", b =>
                {
                    b.Property<int>("EID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EID"));

                    b.Property<string>("AdminRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<int?>("ApprovedByUserID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayedQuestions")
                        .HasColumnType("int");

                    b.Property<decimal?>("Duration")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TIDs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalMarks")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("TotalQuestions")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EID");

                    b.HasIndex("ApprovedByUserID");

                    b.HasIndex("UserId");

                    b.ToTable("Exams", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ExamFeedback", b =>
                {
                    b.Property<int>("EID")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EID", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ExamFeedbacks", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Question", b =>
                {
                    b.Property<int>("QID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QID"));

                    b.Property<int?>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<string>("CorrectOptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EID")
                        .HasColumnType("int");

                    b.Property<decimal?>("Marks")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Options")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TID")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("QID");

                    b.HasIndex("EID");

                    b.HasIndex("TID");

                    b.ToTable("Questions", (string)null);
                });

            modelBuilder.Entity("Domain.Models.QuestionReport", b =>
                {
                    b.Property<int>("QID")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QID", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionReports", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Response", b =>
                {
                    b.Property<int>("EID")
                        .HasColumnType("int");

                    b.Property<int>("QID")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsSubmittedFresh")
                        .HasColumnType("bit");

                    b.Property<string>("Resp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Resp_Score")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("EID", "QID", "UserId");

                    b.HasIndex("QID");

                    b.HasIndex("UserId");

                    b.ToTable("Responses", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Result", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("EID")
                        .HasColumnType("int");

                    b.Property<int?>("Attempts")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<decimal?>("Score")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("UserId", "EID");

                    b.HasIndex("EID");

                    b.ToTable("Results", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Topic", b =>
                {
                    b.Property<int>("TID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TID"));

                    b.Property<int?>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<int?>("ApprovedByUserID")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("TID");

                    b.HasIndex("ApprovedByUserID");

                    b.ToTable("Topics", (string)null);
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Password");

                    b.Property<string>("PhoneNo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Role");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("UserId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Validation", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Token");

                    b.ToTable("Validations", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Exam", b =>
                {
                    b.HasOne("Domain.Models.User", "ApprovedByUser")
                        .WithMany("ExamsApproved")
                        .HasForeignKey("ApprovedByUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.User", "Creator")
                        .WithMany("ExamsCreated")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApprovedByUser");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Domain.Models.ExamFeedback", b =>
                {
                    b.HasOne("Domain.Models.Exam", "Exam")
                        .WithMany("ExamFeedbacks")
                        .HasForeignKey("EID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("ExamFeedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Question", b =>
                {
                    b.HasOne("Domain.Models.Exam", "Exam")
                        .WithMany("Questions")
                        .HasForeignKey("EID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.Topic", "Topic")
                        .WithMany("Questions")
                        .HasForeignKey("TID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Exam");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Domain.Models.QuestionReport", b =>
                {
                    b.HasOne("Domain.Models.Question", "Question")
                        .WithMany("QuestionReports")
                        .HasForeignKey("QID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("QuestionReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Response", b =>
                {
                    b.HasOne("Domain.Models.Exam", "Exam")
                        .WithMany("Responses")
                        .HasForeignKey("EID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Question", "Question")
                        .WithMany("Responses")
                        .HasForeignKey("QID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Result", b =>
                {
                    b.HasOne("Domain.Models.Exam", "Exam")
                        .WithMany("Results")
                        .HasForeignKey("EID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Results")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Topic", b =>
                {
                    b.HasOne("Domain.Models.User", "ApprovedByUser")
                        .WithMany("TopicsApproved")
                        .HasForeignKey("ApprovedByUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApprovedByUser");
                });

            modelBuilder.Entity("Domain.Models.Exam", b =>
                {
                    b.Navigation("ExamFeedbacks");

                    b.Navigation("Questions");

                    b.Navigation("Responses");

                    b.Navigation("Results");
                });

            modelBuilder.Entity("Domain.Models.Question", b =>
                {
                    b.Navigation("QuestionReports");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("Domain.Models.Topic", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("ExamFeedbacks");

                    b.Navigation("ExamsApproved");

                    b.Navigation("ExamsCreated");

                    b.Navigation("QuestionReports");

                    b.Navigation("Responses");

                    b.Navigation("Results");

                    b.Navigation("TopicsApproved");
                });
#pragma warning restore 612, 618
        }
    }
}
